import { css, LitElement, html } from 'lit';
import { classMap } from 'lit/directives/class-map.js';
import AuroLibraryRuntimeUtils from '@aurodesignsystem/auro-library/scripts/utils/runtimeUtils.mjs';
import { html as html$1 } from 'lit/static-html.js';
import '@aurodesignsystem/auro-badge';
import { AuroDependencyVersioning } from '@aurodesignsystem/auro-library/scripts/runtime/dependencyTagVersioning.mjs';
import { AuroBadge } from '@aurodesignsystem/auro-badge/src/auro-badge.js';

var styleCss$1 = css`*,*:before,*:after{box-sizing:border-box}@media(prefers-reduced-motion: reduce){*,*:before,*:after{animation-duration:.01ms !important;animation-iteration-count:1 !important;transition-duration:.01ms !important}}*:focus-visible{outline:0}*:focus-visible{outline:0}:focus:not(:focus-visible){outline:3px solid transparent}:host{display:block;isolation:isolate}.nonstop:before{content:"";height:var(--ds-size-25, 0.125rem);width:100%;position:relative;top:10px;border-width:var(--ds-size-25, 0.125rem) 0 0 0;border-style:solid}.canceled:before{border-style:dashed}.multiple ::slotted(*){display:block}@container (max-width: 320px){.multiple ::slotted(*){display:none}}.showNoStops{display:none}@container (max-width: 320px){.showNoStops{display:block}}.slotContainer{display:flex;justify-content:space-around;min-height:var(--ds-size-300, 1.5rem);container-type:inline-size}`;

var colorCss$1 = css`.nonstop:before,.canceled:before{border-top-color:var(--ds-auro-flightline-segment-line-color)}:host([canceled]){--ds-auro-flightline-segment-line-color: var(--ds-color-utility-error-default, #cc1816)}`;

var tokensCss = css`:host{--ds-auro-flightline-segment-line-color: var(--ds-color-utility-navy-default, #265688);--ds-auro-flightline-destination-line-color: var(--ds-color-utility-navy-default, #265688);--ds-auro-flightline-layover-marker-border-color: var(--ds-color-utility-navy-default, #265688);--ds-auro-flightline-layover-marker-container-color: var(--ds-color-utility-navy-default, #265688);--ds-auro-flightline-layover-iata-color: var(--ds-color-text-secondary-default, #525252);--ds-auro-flightline-layover-duration-color: var(--ds-color-text-secondary-default, #525252)}`;

// Copyright (c) 2021 Alaska Airlines. All right reserved. Licensed under the Apache-2.0 license
// See LICENSE in the project root for license information.


// See https://git.io/JJ6SJ for "How to document your components using JSDoc"
/**
 * The auro-flightline component provides a responsive flight timeline experience by placing dots indicating stopovers and layovers on a timeline.
 * @attr {Boolean} canceled - Whether the flightline is canceled.
 * @slot - fill in with `<auro-flight-segment>` components of a given leg.
 */

class AuroFlightline extends LitElement {
  constructor() {
    super();
    this.canceled = false;

    /**
     * @private
     */
    this.hasCanceledSegment = false;

    /**
     * @private
     */
    this.firstSegmentCanceled = false;

    /**
     * @private
     */
    this.lastSegmentCanceled = false;

    /**
     * @private
     */
    this.runtimeUtils = new AuroLibraryRuntimeUtils();
  }

  static get properties() {
    return {
      canceled:    { type: Boolean },
      hasCanceledSegment: { type: Boolean },
      firstSegmentCanceled: { type: Boolean },
      lastSegmentCanceled: { type: Boolean }
    };
  }

  static get styles() {
    return [
      styleCss$1,
      colorCss$1,
      tokensCss
    ];
  }

  /**
   * This will register this element with the browser.
   * @param {string} [name="auro-flightline"] - The name of element that you want to register to.
   *
   * @example
   * AuroFlightLine.register("custom-flightline") // this will register this element to <custom-flightline/>
   *
   */
  static register(name = "auro-flightline") {
    AuroLibraryRuntimeUtils.prototype.registerComponent(name, AuroFlightline);
  }

  firstUpdated() {
    // Add the tag name as an attribute if it is different than the component name
    this.runtimeUtils.handleComponentTagRename(this, 'auro-flightline');
  }

  /** @private */
  containsCanceledSegment() {
    const segments = this.querySelectorAll('auro-flight-segment, [auro-flight-segment');
    for (let idx = 0; idx < segments.length; idx += 1) {
      const segment = segments[idx];
      if (this.canceled) {
        segment.canceled = true;
        segment.destinationCanceled = true;
      }

      if (segment.canceled || segment.hasAttribute('canceled')) {
        this.hasCanceledSegment = true;
        if (idx === 0) {
          this.firstSegmentCanceled = true;
        }
      }

      if (segment.hasAttribute('destinationCanceled') && idx === segments.length - 1) {
        this.lastSegmentCanceled = true;
      }
    }
  }

  // function that renders the HTML and CSS into  the scope of the component
  render() {
    const isMultiple = this.children.length > 1;
    const classes = {
      'slotContainer': true,
      'nonstop': !this.children.length,
      'multiple': isMultiple,
      'canceled': this.canceled
    };

    return html`
      <div class="${classMap(classes)}">
        <slot @slotchange=${this.containsCanceledSegment}></slot>
        ${isMultiple ? html`
          <auro-flight-segment
            class="showNoStops"
            ?canceled=${this.firstSegmentCanceled}
            ?partialCancel=${this.hasCanceledSegment}
            ?destinationCanceled=${this.lastSegmentCanceled}
            iata="${this.children.length} stops"
          ></auro-flight-segment>
        ` : html``}
      </div>`;
  }
}

var styleCss = css`.util_displayInline{display:inline}.util_displayInlineBlock{display:inline-block}.util_displayBlock{display:block}.util_displayFlex{display:flex}.util_displayHidden{display:none}.util_displayHiddenVisually{position:absolute;overflow:hidden;clip:rect(1px, 1px, 1px, 1px);width:1px;height:1px;padding:0;border:0}:host{flex-grow:1;flex-basis:0}.wrapper{position:relative}.wrapper:before,.wrapper:after{border-top-width:var(--ds-size-25, 0.125rem);border-top-style:solid;position:absolute;top:.5rem;z-index:1}.wrapper:before{content:"";right:50%;width:100%}.wrapper:after{left:50%;width:50%}:host(:first-child) .wrapper:before,:host(:only-of-type) .wrapper:before{width:50%}:host(:last-child) .wrapper:after,:host(:only-of-type) .wrapper:after{content:""}:host([canceled]) .wrapper:before{border-top-width:var(--ds-size-25, 0.125rem);border-top-style:dashed}:host([destinationCanceled]) .wrapper:after{border-top-width:var(--ds-size-25, 0.125rem);border-top-style:dashed}auro-badge{min-width:var(--ds-size-800, 4rem)}.layout{display:inline-flex;align-items:center;justify-content:center;flex-direction:column;z-index:2;width:100%}.leg{border-style:solid;border-width:var(--ds-size-25, 0.125rem);border-radius:50%;width:var(--ds-size-150, 0.75rem);height:var(--ds-size-150, 0.75rem)}@media screen and (min-width: 576px){.leg{width:var(--ds-size-200, 1rem);height:var(--ds-size-200, 1rem)}}.iata{margin-top:var(--ds-size-150, 0.75rem);padding-bottom:var(--ds-size-50, 0.25rem)}`;

var colorCss = css`.wrapper:before{border-top-color:var(--ds-auro-flightline-segment-line-color)}.wrapper:after{border-top-color:var(--ds-auro-flightline-destination-line-color)}.iata{color:var(--ds-auro-flight-segment-iata-text-color)}[auro-badge]{color:var(--ds-auro-flightline-layover-duration-color)}.leg{border-color:var(--ds-auro-flightline-layover-marker-border-color);background-color:var(--ds-auro-flightline-layover-marker-container-color)}.leg--stopover{--ds-auro-flightline-layover-marker-container-color: var(--ds-color-container-ui-secondary-default-default, #ffffff)}.leg--canceled{--ds-auro-flightline-layover-marker-border-color: var(--ds-color-utility-error-default, #cc1816);--ds-auro-flightline-layover-marker-container-color: var(--ds-color-utility-error-default, #cc1816)}:host([nextday]){--ds-auro-flightline-layover-duration-color: var(--ds-color-text-error-default, #cc1816)}:host([canceled]){--ds-auro-flightline-segment-line-color: var(--ds-color-utility-error-default, #cc1816)}:host([destinationCanceled]){--ds-auro-flightline-layover-duration-color: var(--ds-color-text-error-default, #cc1816);--ds-auro-flightline-destination-line-color: var(--ds-color-utility-error-default, #cc1816)}`;

var badgeVersion = '3.0.1';

// Copyright (c) 2021 Alaska Airlines. All right reserved. Licensed under the Apache-2.0 license
// See LICENSE in the project root for license information.


// See https://git.io/JJ6SJ for "How to document your components using JSDoc"
/**
 * The auro-flight-segment component is a standard for indicating stopovers and layovers.
 * Stopovers do not have duration information and are indicated differently.
 * Layovers contain duration information and are indicated with a solid fill.
 * For more information about the difference between a layover and a stopover,
 * [please see this article.](https://www.turkishairlines.com/en-int/any-questions/what-is-the-difference-between-a-layover-and-a-stopover/).
 *
 * @attr {Boolean} stopover - Indicates a stopover. Do not provide duration.
 * @attr {Boolean} nextDay - Indicates time is on the following calendar day.
 * @attr {String} iata - Text to display, typically a station code (SEA, PVD, AVP)
 * @attr {String} duration - Displayed in the auro-badge, typically duration (1h 53m)
 * @attr {Boolean} canceled - Whether the segment is canceled. The line leading to the segment will be red.
 * @attr {Boolean} destinationCanceled - Whether the following segment is canceled, will only affect the last segment in a flightline. The line after the segment will be red.
 */

class AuroFlightSegment extends LitElement {
  constructor() {
    super();
    this.stopover = false;
    this.canceled = false;
    this.destinationCanceled = false;

    /**
     * @private
     */
    this.partialCancel = false;

    /**
     * Generate unique names for dependency components.
     */
    const versioning = new AuroDependencyVersioning();

    /**
     * @private
     */
    this.badgeTag = versioning.generateTag('auro-badge', badgeVersion, AuroBadge);
  }

  // function to define props used within the scope of this component
  static get properties() {
    return {
      stopover:   { type: Boolean },
      nextDay: {
        type: Boolean,
        reflect: true
      },
      iata:       { type: String },
      duration:   { type: String },
      canceled:   { type: Boolean,
        reflect: true },
      destinationCanceled: { type: Boolean,
        reflect: true },
      partialCancel: { type: Boolean }
    };
  }

  static get styles() {
    return [
      css`${styleCss}`,
      css`${colorCss}`,
      css`${tokensCss}`
    ];
  }

  /**
   * This will register this element with the browser.
   * @param {string} [name="auro-flightline"] - The name of element that you want to register to.
   *
   * @example
   * AuroFlightSegment.register("auro-flight-segment") // this will register this element to <auro-flight-segment/>
   *
   */
  static register(name = "auro-flight-segment") {
    AuroLibraryRuntimeUtils.prototype.registerComponent(name, AuroFlightSegment);
  }

  firstUpdated() {
    // Add the tag name as an attribute if it is different than the component name
    AuroLibraryRuntimeUtils.prototype.handleComponentTagRename(this, 'auro-flight-segment');
  }

  // function that renders the HTML and CSS into  the scope of the component
  render() {
    const legClasses = {
      'leg': true,
      'layout': true,
      'leg--stopover': this.stopover,
      'leg--canceled': this.canceled || this.partialCancel
    };

    return html$1`
      <div class="wrapper">
        <div class="layout">
          <slot></slot>
          <div class="${classMap(legClasses)}"></div>
          <span class="iata">${this.iata}</span>
          ${this.duration ? html$1`
              <${this.badgeTag} label>
                ${this.duration}
                <span class="util_displayHiddenVisually"> layover</span>
              </${this.badgeTag}>
          ` : html$1``}
        </div>
      </div>
    `;
  }
}

AuroFlightline.register();
AuroFlightSegment.register();
